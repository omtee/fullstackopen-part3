{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Number","person","deletePerson","name","number","onClick","Filter","filter","handler","value","onChange","PersonForm","props","submitHandler","nameValue","nameHandler","numberValue","numberHandler","onSubmit","type","Persons","persons","map","Notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","notification","setNotification","useEffect","personService","initialPersons","Notify","setTimeout","updatePerson","changedPerson","returnedPerson","catch","error","console","log","personsToShow","toLowerCase","includes","event","target","preventDefault","existingPerson","find","confirm_message","window","confirm","concat","toDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e3d17dd.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(() => true)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\n\r\nconst Number = ({ person, deletePerson }) => (\r\n  <p>\r\n    {person.name} {person.number}\r\n    <button onClick={() => deletePerson(person.id)}>delete</button>\r\n  </p>\r\n)\r\n\r\nconst Filter = ({ filter, handler }) => (\r\n  <div>\r\n    filter shown with\r\n    <input value={filter} onChange={handler} />\r\n  </div>\r\n)\r\n\r\nconst PersonForm = (props) => {\r\n  const { submitHandler } = props\r\n  const { nameValue, nameHandler } = props\r\n  const { numberValue, numberHandler } = props\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div>\r\n        name: <input value={nameValue} onChange={nameHandler} />\r\n      </div>\r\n      <div>\r\n        number: <input value={numberValue} onChange={numberHandler} />\r\n      </div>\r\n      <button type=\"submit\">add</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Persons = ({ persons, deletePerson }) => (\r\n  <div>\r\n    {persons.map(person => <Number key={person.name} person={person} deletePerson={deletePerson} />)}\r\n  </div>\r\n)\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ notification, setNotification ] = useState(null)\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])\r\n\r\n  const Notify = (message) => {\r\n    setNotification(message)\r\n    setTimeout(() => {\r\n      setNotification(null)\r\n    }, 5000)\r\n  }\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    const existingPerson = persons.find(person => person.name === newName)\r\n    if (existingPerson) {\r\n      const confirm_message = `${newName} is already added to phonebook, replace the old number with a new one?`\r\n      if (window.confirm(confirm_message)) {\r\n        console.log('updating..', existingPerson)\r\n        const changedPerson = { ...existingPerson, number: newNumber}\r\n        updatePerson(changedPerson)\r\n      }\r\n    } else {\r\n      const PersonObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n      personService\r\n        .create(PersonObject)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson))\r\n          Notify(`Added ${returnedPerson.name}`)\r\n          \r\n          setNewName('')\r\n          setNewNumber('')\r\n        })\r\n        .catch(error => {\r\n          console.log('error', error)\r\n          Notify(error.response.data.error)\r\n        })\r\n    }\r\n  }\r\n\r\n  const updatePerson = (changedPerson) => {\r\n    //console.log('updating..', changedPerson)\r\n    personService\r\n      .update(changedPerson.id, changedPerson)\r\n      .then(returnedPerson => {\r\n        //console.log('success');\r\n        setPersons(persons.map(person => person.name !== returnedPerson.name ? person : returnedPerson))\r\n        Notify(`Updated number for ${returnedPerson.name}`)\r\n        setNewName('')\r\n        setNewNumber('')\r\n      })\r\n      .catch(error => {\r\n        console.log('error', error)\r\n        Notify(error.response.data.error)\r\n      })\r\n  }\r\n\r\n  const deletePerson = (id) => {\r\n    const toDelete = persons.find(person => person.id === id)\r\n    const confirm_message = `Delete ${toDelete.name}?`\r\n    if (window.confirm(confirm_message)) {\r\n      personService\r\n        .remove(id)\r\n        .then(() => {\r\n          Notify(`Deleted ${toDelete.name}`)\r\n          setPersons(persons.filter(person => person.id !== id))\r\n        })\r\n        .catch(error => {\r\n          Notify(`${toDelete.name} already deleted`)\r\n          setPersons(persons.filter(person => person.id !== id))\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) => setNewName(event.target.value)\r\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\r\n  const handleFilterChange = (event) => setFilter(event.target.value)\r\n\r\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(filter))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={notification} />\r\n      <Filter filter={filter} handler={handleFilterChange} />\r\n      <h2>Add a new</h2>\r\n      <PersonForm\r\n        submitHandler={addPerson}\r\n        nameValue={newName}\r\n        nameHandler={handleNameChange}\r\n        numberValue={newNumber}\r\n        numberHandler={handleNumberChange}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <Persons persons={personsToShow} deletePerson={deletePerson} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}